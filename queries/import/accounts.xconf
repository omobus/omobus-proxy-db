<?xml version="1.0" encoding="utf-8"?>
<accounts templ="%account_id%;%pid%;%ftype%;%code%;%descr%;%address%;%chan_id%;%poten_id%;%rc_id%;%region_id%;%city_id%;%latitude%;%longitude%;%props%;">
<verification>
  <![CDATA[
select count(*) from data_stream
    where s_id = '//%uid%/%pack_code%' and digest = '%pack_digest%'
  ]]>
</verification>
<begin>
  <![CDATA[
update accounts set db_ids=array_remove(db_ids,'%ErpCode%')
    where hidden=0 and approved=1 and db_ids @> (array['%ErpCode%'])::uids_t;
update accounts set hidden=1, db_ids=null
    where hidden=0 and approved=1 and (db_ids is null or cardinality(db_ids)=0);
  ]]>
</begin>
<check_exist>
  <![CDATA[
select count(*) from accounts 
    where account_id = '%account_id%'
  ]]>
</check_exist>
<update>
  <![CDATA[
update accounts set pid=NIL('%pid%'), code=trim(both from '%code%'), ftype=0%ftype%, descr=trim(both from '%descr%'), address=trim(both from '%address%'), rc_id=NIL('%rc_id%'), chan_id=NIL('%chan_id%'), poten_id=NIL('%poten_id%'), region_id=NIL('%region_id%'), city_id=NIL('%city_id%'), props=NIL('%props%')::hstore, approved=1, hidden=0, db_ids=array_append(db_ids,'%ErpCode%'), "_isAlienData"=1
    where account_id = '%account_id%'
  ]]>
</update>
<insert>
  <![CDATA[
insert into accounts(pid, account_id, code, ftype, descr, address, rc_id, chan_id, poten_id, region_id, city_id, latitude, longitude, props, approved, hidden, db_ids, "_isAlienData")
    values(NIL('%pid%'), '%account_id%', trim(both from '%code%'), 0%ftype%, trim(both from '%descr%'), trim(both from '%address%'), NIL('%rc_id%'), NIL('%chan_id%'), NIL('%poten_id%'), NIL('%region_id%'), NIL('%city_id%'), NIL(%latitude%), NIL(%longitude%), NIL('%props%')::hstore, 1, 0, array['%ErpCode%'], 1)
  ]]>
</insert>
<end>
  <![CDATA[
/* recalculates targets.rows via internal trigger */
update targets set rows=null where (region_ids is not null or city_ids is not null or rc_ids is not null or chan_ids is not null or poten_ids is not null) and e_date >= current_date::date_t and hidden=0;
/* unlocks accounts if deletion request doesn't exist */
update accounts set locked = 0 where hidden = 0 and locked = 1 and account_id not in (select account_id from j_deletions where hidden = 0 and validated = 1);
/* set flag for refreshing [ownerless] attribute: */
insert into ".sesparams" values('%uid%#ownerless') on conflict do nothing;

select stor_data_stream('//%uid%/%pack_code%', '%pack_digest%', '%server_hostname%')
  ]]>
</end>
</accounts>