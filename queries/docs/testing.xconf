<?xml version="1.0" encoding="utf-8" ?>
<testing>
<check_user>
  <![CDATA[
select user_id as user_id_sys from users 
    where lower(user_id)=lower('%ErpId%') /*%user_id%*/
  ]]>
</check_user>
<check_exist>
  <![CDATA[
select count(*) from h_testing 
    where user_id='%user_id_sys%' and dev_pack=%dev_pack% and dev_id='%dev_id%' and fix_dt='%fix_dt%'
  ]]>
</check_exist>
<check_date>
  <![CDATA[
select (current_date - '%fix_dt%'::date) not between -1 and "paramInteger"('gc:keep_alive'::uid_t) banned
  ]]>
</check_date>
<create>
  <![CDATA[
select * from doc_id()
  ]]>
</create>
<write_body>
  <![CDATA[
insert into h_testing(doc_id, doc_no, inserted_node, dev_pack, dev_id, dev_login, fix_dt, user_id, w_cookie, a_cookie, activity_type_id, account_id, contact_id, created_dt, created_gps_la, created_gps_lo, created_gps_dt, closed_dt, closed_gps_la, closed_gps_lo, closed_gps_dt, rows, sla)
    values('%doc_id_sys%', '%doc_id%', '%server_hostname%', %dev_pack%, '%dev_id%', '%user_id%', '%fix_dt%', '%user_id_sys%', '%w_cookie%', '%a_cookie%', '%activity_type_id%', '%account_id%', '%contact_id%', '%created_dt%', NIL(%created_gps_la%), NIL(%created_gps_lo%), NIL('%created_gps_dt%'), '%closed_dt%', NIL(%closed_gps_la%), NIL(%closed_gps_lo%), NIL('%closed_gps_dt%'), %rows%, %sla%)
  ]]>
</write_body>
<write_row>
  <![CDATA[
insert into t_testing(doc_id, row_no, testing_criteria_id, testing_score_id, criteria_wf, score_wf, score, note)
    values('%doc_id_sys%', %row_no%, '%testing_criteria_id%', NIL('%testing_score_id%'), %criteria_wf%, NIL(%score_wf%), NIL(%score%), NIL('%note%'))
  ]]>
</write_row>
<close>
  <![CDATA[
do $$
declare
    f_date date_t default left('%fix_dt%', 10);
    f_time time_t default substring('%fix_dt%', 12, 5);
    a_id uid_t;
    u_id uid_t;
    c_id uid_t;
    s_id uid_t;
    c_wf wf_t;
    s_wf wf_t;
    d_id uid_t;
    x datetime_t;
    s int32_t;
    n note_t;
    z numeric(6,5);
begin
-- **** testing --> j_docs
    insert into j_docs(doc_id, doc_no, dev_id, dev_login, user_id, account_id, fix_dt, created_dt, created_gps_dt, created_gps_la, created_gps_lo, closed_dt, closed_gps_dt, closed_gps_la, closed_gps_lo, w_cookie, a_cookie, activity_type_id, inserted_node, dev_pack, doc_code)
	values('%doc_id_sys%', '%doc_id%', '%dev_id%', '%user_id%', '%user_id_sys%', '%account_id%', '%fix_dt%', '%created_dt%', NIL('%created_gps_dt%'), NIL(%created_gps_la%), NIL(%created_gps_lo%), '%closed_dt%', NIL('%closed_gps_dt%'), NIL(%closed_gps_la%), NIL(%closed_gps_lo%), '%w_cookie%', '%a_cookie%', '%activity_type_id%', '%server_hostname%', '%dev_pack%', '%doc_code_sys%');

-- **** testing --> sysstats
    perform sysstat_add('%user_id_sys%', f_date, f_time);

-- **** testing --> sysdevices
    update sysdevices set outdated_ts = current_timestamp
	where dev_id = '%dev_id%' and dev_login = '%user_id%' and user_id = '%user_id_sys%';

-- **** testing --> content_stream
    perform content_add('tech_route', '%user_id_sys%', f_date, f_date);
    perform content_add('a_list', '%user_id_sys%', f_date, f_date);
    perform content_add('tech_testings', '%user_id_sys%', f_date, f_date);
    perform content_add('stat_testings', '', "monthDate_First"(f_date)::date_t, "monthDate_Last"(f_date)::date_t);

-- **** testing --> dyn_testings
    /* removes obsolete entires */
    delete from dyn_testings where contact_id = '%contact_id%' and fix_date = f_date;
    /* recompiles data */
    for c_id, s_id, c_wf, s_wf, s, n, x, a_id, u_id, d_id, z in
	select 
	    t.testing_criteria_id, t.testing_score_id, t.criteria_wf, t.score_wf, t.score, t.note, h.fix_dt, h.account_id, h.user_id, h.doc_id, h.sla
	from t_testing t left join h_testing h on t.doc_id = h.doc_id
	    where h.contact_id = '%contact_id%' and left(h.fix_dt,10) = f_date
	order by h.fix_dt
    loop
	if( (select count(*) from dyn_testings where contact_id='%contact_id%' and testing_criteria_id=c_id and fix_date=f_date) = 0 ) then
	    insert into dyn_testings(fix_date, contact_id, testing_criteria_id, testing_score_id, criteria_wf, score_wf, score, note, sla, fix_dt, account_id, user_id, doc_id)
		values(f_date, '%contact_id%', c_id, s_id, c_wf, s_wf, s, n, z, x, a_id, u_id, d_id);
	else
	    update dyn_testings set testing_score_id = s_id, criteria_wf = c_wf, score_wf = s_wf, score = s, note = n, sla = z, fix_dt = x, account_id = a_id, user_id = u_id, doc_id = d_id, updated_ts = current_timestamp
		where contact_id = '%contact_id%' and testing_criteria_id = c_id and fix_date = f_date;
	end if;
    end loop;

    if( f_date >= (select max(fix_dt::date_t) from h_testing where contact_id='%contact_id%' group by contact_id) ) then
	update dyn_testings set "_isRecentData" = null where contact_id = '%contact_id%' and "_isRecentData" = 1;
	update dyn_testings set "_isRecentData" = 1 where contact_id = '%contact_id%' and fix_date=f_date;
    end if;

-- **** testing --> contacts
    if( f_date >= (select max(fix_dt::date_t) from h_testing where contact_id='%contact_id%' group by contact_id) ) then
	if( (select count(*) from contacts where contact_id='%contact_id%') = 0 ) then
	    insert into contacts(contact_id, account_id, name, job_title_id, author_id, hidden)
		values('%contact_id%', '%account_id%', '', '', '%user_id_sys%', 1);
	    raise notice '(testing) added new contact [%contact_id%]';
	end if;
    end if;
end;
$$;
  ]]>
</close>
<log>
  <![CDATA[
insert into pack_stream (pack_code, pack_name, pack_size, inserted_node, inserted_svc, vstamp, dev_pack, dev_id, dev_login, user_id, fix_dt, status, obj_id)
    values('%doc_code_sys%', '%doc_name_sys%', %doc_size_sys%, '%server_hostname%', 'docs', '%vstamp%', %dev_pack%, '%dev_id%', '%user_id%', NIL('%user_id_sys%'), '%fix_dt%', '%doc_status_sys%', NIL('%doc_id_sys%'))
  ]]>
</log>
</testing>