<?xml version="1.0" encoding="utf-8" ?>
<quest>
<check_user>
  <![CDATA[
select user_id as user_id_sys from users 
    where user_id='%ErpId%' /*%user_id%*/
  ]]>
</check_user>
<check_exist>
  <![CDATA[
select count(*) from h_quest 
    where user_id='%user_id_sys%' and dev_pack=%dev_pack% and dev_id='%dev_id%' and fix_dt='%fix_dt%'
  ]]>
</check_exist>
<check_date>
  <![CDATA[
select (current_date - '%fix_dt%'::date) not between -1 and "paramInteger"('gc:keep_alive'::uid_t) banned
  ]]>
</check_date>
<create>
  <![CDATA[
select * from doc_id()
  ]]>
</create>
<write_body>
  <![CDATA[ 
insert into h_quest(doc_id, doc_no, inserted_node, dev_pack, dev_id, dev_login, fix_dt, user_id, w_cookie, a_cookie, activity_type_id, account_id, created_dt, created_gps_la, created_gps_lo, created_gps_dt, closed_dt, closed_gps_la, closed_gps_lo, closed_gps_dt, rows, blobs)
    values('%doc_id_sys%', '%doc_id%', '%server_hostname%', %dev_pack%, '%dev_id%', '%user_id%', '%fix_dt%', '%user_id_sys%', '%w_cookie%', '%a_cookie%', '%activity_type_id%', '%account_id%', '%created_dt%', NIL(%created_gps_la%), NIL(%created_gps_lo%), NIL('%created_gps_dt%'), '%closed_dt%', NIL(%closed_gps_la%), NIL(%closed_gps_lo%), NIL('%closed_gps_dt%'), %rows%, %blobs%)
  ]]>
</write_body>
<write_row>
  <![CDATA[ 
insert into t_quest(doc_id, row_no, qname_id, qrow_id, value)
    values('%doc_id_sys%', %row_no%, '%qname_id%', '%qrow_id%', '%value%')
  ]]>
</write_row>
<write_blob>
  <![CDATA[ 
insert into t_quest2(doc_id, guid, qname_id, qentity_id, photo)
    values('%doc_id_sys%', '%guid%', '%qname_id%', '%qentity_id%', $1:blob::OID)
  ]]>
</write_blob>
<close>
  <![CDATA[
do $$
declare
    f_date date_t default left('%fix_dt%', 10);
    f_time time_t default substring('%fix_dt%', 12, 5);
    r1 record;
    r2 record;
begin
-- **** quest --> j_docs
    insert into j_docs(doc_id, doc_no, dev_id, dev_login, user_id, account_id, fix_dt, created_dt, created_gps_dt, created_gps_la, created_gps_lo, closed_dt, closed_gps_dt, closed_gps_la, closed_gps_lo, w_cookie, a_cookie, activity_type_id, inserted_node, dev_pack, doc_code)
	values('%doc_id_sys%', '%doc_id%', '%dev_id%', '%user_id%', '%user_id_sys%', '%account_id%', '%fix_dt%', '%created_dt%', NIL('%created_gps_dt%'), NIL(%created_gps_la%), NIL(%created_gps_lo%), '%closed_dt%', NIL('%closed_gps_dt%'), NIL(%closed_gps_la%), NIL(%closed_gps_lo%), '%w_cookie%', '%a_cookie%', '%activity_type_id%', '%server_hostname%', '%dev_pack%', '%doc_code_sys%');

-- **** quest --> sysstats
    perform sysstat_add('%user_id_sys%', f_date, f_time);

-- **** quest --> sysdevices
    update sysdevices set outdated_ts = current_timestamp
	where dev_id = '%dev_id%' and dev_login = '%user_id%' and user_id = '%user_id_sys%';

-- **** quest --> thumbnail_stream
    insert into thumbnail_stream(photo)
	select photo from t_quest2 where doc_id = '%doc_id_sys%' and photo is not null;

-- **** quest --> content_stream
    perform content_add('tech_route', '%user_id_sys%', f_date, f_date);
    perform content_add('a_list', '%user_id_sys%', f_date, f_date);
    perform content_add('tech_quests', '%user_id_sys%', f_date, f_date);
    perform content_add('stat_quests', '', "monthDate_First"(f_date)::date_t, "monthDate_Last"(f_date)::date_t);

-- **** quest --> dyn_quests
    /* removes obsolete entires */
    delete from dyn_quests where account_id = '%account_id%' and fix_date = f_date;
    /* recompiles data */
    for r1 in
	select t.qname_id, t.qrow_id, t.value, h.user_id, h.doc_id, h.fix_dt, h.inserted_ts from t_quest t, h_quest h 
	    where t.doc_id = h.doc_id and h.account_id = '%account_id%' and left(h.fix_dt,10) = f_date
	order by h.fix_dt
    loop
	if( (select count(*) from dyn_quests where account_id = '%account_id%' and qname_id = r1.qname_id and qrow_id = r1.qrow_id and fix_date = f_date) = 0 ) then
	    select founder_id, founded_dt from dyn_quests where account_id = '%account_id%' and qname_id = r1.qname_id order by fix_date limit 1 
		into r2;
	    insert into dyn_quests(fix_date, account_id, qname_id, qrow_id, value, fix_dt, user_id, doc_id, inserted_ts, founder_id, founded_dt)
		values(f_date, '%account_id%', r1.qname_id, r1.qrow_id, r1.value, r1.fix_dt, r1.user_id, r1.doc_id, r1.inserted_ts, coalesce(r2.founder_id,r1.user_id), coalesce(r2.founded_dt,r1.fix_dt));
	else
	    update dyn_quests set value = r1.value, fix_dt = r1.fix_dt, user_id = r1.user_id, doc_id = r1.doc_id, updated_ts = current_timestamp
		where account_id = '%account_id%' and qname_id = r1.qname_id and qrow_id = r1.qrow_id and fix_date = f_date;
	end if;
    end loop;

-- **** quest --> dyn_quests2
    /* removes obsolete entires */
    delete from dyn_quests2 where account_id = '%account_id%' and fix_date = f_date;
    /* recompiles data */
    for r1 in
	select t.guid, t.qname_id, t.qentity_id, t.photo, h.user_id, h.doc_id, h.fix_dt, h.inserted_ts from t_quest2 t, h_quest h 
	    where t.doc_id = h.doc_id and h.account_id = '%account_id%' and left(h.fix_dt,10) = f_date
	order by h.fix_dt
    loop
	if( (select count(*) from dyn_quests2 where account_id = '%account_id%' and qname_id = r1.qname_id and guid = r1.guid and fix_date = f_date) = 0 ) then
	    select founder_id, founded_dt from dyn_quests/*2*/ where account_id = '%account_id%' and qname_id = r1.qname_id order by fix_date limit 1 
		into r2;
	    insert into dyn_quests2(fix_date, account_id, qname_id, qentity_id, guid, photo, fix_dt, user_id, doc_id, inserted_ts, founder_id, founded_dt)
		values(f_date, '%account_id%', r1.qname_id, r1.qentity_id, r1.guid, r1.photo, r1.fix_dt, r1.user_id, r1.doc_id, r1.inserted_ts, coalesce(r2.founder_id,r1.user_id), coalesce(r2.founded_dt,r1.fix_dt));
	else
	    update dyn_quests2 set photo = r1.photo, fix_dt = r1.fix_dt, user_id = r1.user_id, doc_id = r1.doc_id, updated_ts = current_timestamp
		where account_id = '%account_id%' and qname_id = r1.qname_id and guid = r1.guid and fix_date = f_date;
	end if;
    end loop;

-- **** fix [_isRecentData] flag
    if( f_date >= (select max(fix_dt::date_t) from h_quest where account_id='%account_id%' group by account_id) ) then
	update dyn_quests set "_isRecentData" = null where account_id='%account_id%' and "_isRecentData" = 1;
	update dyn_quests set "_isRecentData" = 1 where account_id='%account_id%' and fix_date=f_date;
	update dyn_quests2 set "_isRecentData" = null where account_id='%account_id%' and "_isRecentData" = 1;
	update dyn_quests2 set "_isRecentData" = 1 where account_id='%account_id%' and fix_date=f_date;
    end if;
end;

$$;
  ]]>
</close>
<log>
  <![CDATA[
insert into pack_stream (pack_code, pack_name, pack_size, inserted_node, inserted_svc, vstamp, dev_pack, dev_id, dev_login, user_id, fix_dt, status, obj_id)
    values('%doc_code_sys%', '%doc_name_sys%', %doc_size_sys%, '%server_hostname%', 'docs', '%vstamp%', %dev_pack%, '%dev_id%', '%user_id%', NIL('%user_id_sys%'), '%fix_dt%', '%doc_status_sys%', NIL('%doc_id_sys%'))
  ]]>
</log>
</quest>