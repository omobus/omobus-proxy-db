<?xml version="1.0" encoding="utf-8" ?>
<yandex-reverse>
    <generator>
  <![CDATA[
local http = require('httpslib')
local req = "GET /1.x/?format=json&geocode=$longitude,$latitude&kind=house&results=10 HTTP/1.1\r\nHost: $hostname\r\nUser-Agent: omobusd\r\nConnection: close\r\n\r\n"
local hostname = "geocode-maps.yandex.ru"

local function strrepl(s, f, t)
    return s:replace(string.format("$%s", f), t)
end

local function build_request()
    local x = req
    x = strrepl(x, "latitude", _latitude)
    x = strrepl(x, "longitude", _longitude)
    return strrepl(x, "hostname", hostname)
end

local function distance(la0, lo0, la1, lo1)
    la0 = la0*math.pi/180.0
    la1 = la1*math.pi/180.0
    lo0 = lo0*math.pi/180.0
    lo1 = lo1*math.pi/180.0
    return 6372795.0 * 
	math.atan(math.sqrt((math.cos(la1)*math.sin(lo0-lo1)^2)+(math.abs(math.cos(la0)*math.sin(la1)-math.sin(la0)*math.cos(la1)*math.cos(lo0-lo1))^2))
	    /(math.sin(la0)*math.sin(la1)+math.cos(la0)*math.cos(la1)*math.cos(lo0-lo1)))
end

local function set_param_s(n, v)
    set_param(_content, n, v ~= nil and v or "")
end

local function isValid(x)
    return x.kind == "house" and x.precision == "exact"
end

local function get_metadata(tb)
    local obj, dist, z
    if tonumber(tb.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found) > 0 then
	for i,v in ipairs(tb.response.GeoObjectCollection.featureMember) do
	    if isValid(v.GeoObject.metaDataProperty.GeocoderMetaData) then
		for lo, _, la in v.GeoObject.Point.pos:gmatch("([0-9.]+)([ ]*)([0-9.]+)") do
		    z = distance(la, lo, _latitude, _longitude)
		    if z ~= nil and (dist == nil or dist > z) then
			dist = z
			obj = v.GeoObject.metaDataProperty.GeocoderMetaData
		    end
		    break
		end
	    end
	end
    end
    return obj
end

local function main()
    local tb, obj, xobj, err

    tb, err = http.getJSON(hostname, build_request())
    if err or tb == nil then
	set_param(_content, "x-address", "")
	set_param(_content, "x-country", "")
	set_param(_content, "x-region", "")
	set_param(_content, "x-area", "")
	set_param(_content, "x-city", "")
	set_param(_content, "x-street", "")
	set_param(_content, "x-house", "")
	log_warn(string.format("invalid reverse geocoding for account_id='%s'", _account_id))
    else
	obj = get_metadata(tb)
	if obj ~= nil then
	    xobj = obj.AddressDetails.Country
	    set_param_s("x-address", obj.text)
	    set_param_s("x-country", xobj.CountryNameCode)
	    if xobj.AdministrativeArea ~= nil then
		set_param_s("x-region", xobj.AdministrativeArea.AdministrativeAreaName)
		if xobj.AdministrativeArea.SubAdministrativeArea ~= nil then 
		    xobj = xobj.AdministrativeArea.SubAdministrativeArea
		    set_param_s("x-area", xobj.SubAdministrativeAreaName)
		else
		    xobj = xobj.AdministrativeArea
		    set_param(_content, "x-area", "")
		end
	    else
		set_param(_content, "x-region", "")
		set_param(_content, "x-area", "")
	    end
	    if xobj.Locality ~= nil then
		set_param_s("x-city", xobj.Locality.LocalityName)
		if xobj.Locality.Thoroughfare ~= nil then
		    set_param_s("x-street", xobj.Locality.Thoroughfare.ThoroughfareName)
		    set_param_s("x-house", xobj.Locality.Thoroughfare.Premise.PremiseNumber)
		elseif xobj.Locality.DependentLocality ~= nil and xobj.Locality.DependentLocality.Thoroughfare ~= nil then
		    set_param_s("x-street", xobj.Locality.DependentLocality.Thoroughfare.ThoroughfareName)
		    set_param_s("x-house", xobj.Locality.DependentLocality.Thoroughfare.Premise.PremiseNumber)
		elseif xobj.Locality.Premise ~= nil then
		    set_param(_content, "x-street", "")
		    set_param_s("x-house", xobj.Locality.Premise.PremiseNumber)
		else
		    set_param(_content, "x-street", "")
		    set_param(_content, "x-house", "")
		end
	    else
		set_param(_content, "x-city", "")
		set_param(_content, "x-street", "")
		set_param(_content, "x-house", "")
	    end
	else
	    set_param(_content, "x-address", "")
	    set_param(_content, "x-country", "")
	    set_param(_content, "x-region", "")
	    set_param(_content, "x-area", "")
	    set_param(_content, "x-city", "")
	    set_param(_content, "x-street", "")
	    set_param(_content, "x-house", "")
	end
    end
    set_param(_content, "x-latitude", _latitude)
    set_param(_content, "x-longitude", _longitude)
end

main()
-- ** The end **
  ]]>
    </generator>
</yandex-reverse>