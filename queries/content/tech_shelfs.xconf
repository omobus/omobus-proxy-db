<?xml version="1.0" encoding="utf-8" ?>
<tech_shelfs type="application/json" compress="gz" compress_level="9">
    <queries>
	<L0>
  <![CDATA[
select 
    h.doc_id, h.fix_dt, h.inserted_ts, h.account_id, a.code a_code, a.descr a_name, a.address, x.descr categ, 
    round(100*h.sos_target,0) sos_target, round(100*h.soa_target,0) soa_target, round(100*h.sos,1) sos, round(100*h.soa,1) soa, 
    array_to_string(h.photos,',') photos 
from h_shelf h
    left join accounts a on a.account_id = h.account_id
    left join categories x on x.categ_id = h.categ_id
where h.user_id='%user_id%' and left(h.fix_dt, 10)='%b_date%' /*%e_date%*/
order by h.fix_dt, x.row_no, x.descr
  ]]>
	</L0>
	<L1>
  <![CDATA[
select t.doc_id, x.descr, t.facing, t.assortment from (
    select doc_id, row_no, brand_id, facing, assortment from t_shelf where doc_id in (
	    select doc_id from h_shelf where user_id='%user_id%' and left(fix_dt, 10)='%b_date%' /*%e_date%*/
	)
    ) t
    left join brands x on x.brand_id = t.brand_id
order by t.doc_id, t.row_no, x.descr
  ]]>
	</L1>
    </queries>
    <generator>
  <![CDATA[
local std = require('stdlib')

local tb, idx = {}, {}
local rows, cols, r, n, a, x

tb.code = "tech_shelfs"
tb.user_id = _user_id
tb.data_ts = _data_ts
tb.b_date = _b_date
tb.e_date = _e_date
tb.rows = {}

rows = rowset_rows(_L0)
cols = rowset_cols(_L0)

if rows > 0 and cols > 0 then 
    for i = 0, rows-1 do
	r = {}
	r.row_no = i + 1
	for j = 0, cols-1 do
	    n = rowset_colname(_L0, j)
	    a = rowset_value(_L0, i, j)
	    if a ~= nil then
		if n == "photos" then
		    r[n] = std.split(a, ',')
		elseif std.contains({'sos_target','soa_target','sos','soa'}, n) then
		    r[n] = tonumber(a)
		else
		    r[n] = a
		end
	    end
	end
	r.brands = {}
	idx[r.doc_id] = r.brands
	table.insert(tb.rows, r)
    end

    rows = rowset_rows(_L1)
    cols = rowset_cols(_L1)

    for i = 0, rows-1 do
	r = idx[rowset_value(_L1, i, rowset_colid(_L1, "doc_id"))]
	if r ~= nil then
	    x = {}
	    for j = 0, cols-1 do
		n = rowset_colname(_L1, j)
		a = rowset_value(_L1, i, j)
		if a ~= nil and n ~= "doc_id" then
		    x[n] = a
		end
	    end
	    table.insert(r, x)
	end
    end
end

set_param(_content, "rows", rowset_rows(_L0))
write_stream(_content, json.encode(tb))
  ]]>
    </generator>
</tech_shelfs>