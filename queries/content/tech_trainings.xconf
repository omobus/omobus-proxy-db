<?xml version="1.0" encoding="utf-8" ?>
<tech_trainings type="application/json" compress="gz" compress_level="9">
    <queries>
	<L>
  <![CDATA[
select 
    h.doc_id, h.fix_dt, h.inserted_ts,
    h.account_id, a.code a_code, a.descr a_name, a.address, 
    t.descr training_type, 
    m.descr tm, 
    case when m.brand_ids is null or cardinality(m.brand_ids) = 1 then b.descr else
	(select array_to_string(array_agg(descr::text),', ') from brands where brand_id=any(m.brand_ids)) end brand,
    c.name, c.surname, c.patronymic, 
    h.doc_note 
from (
    select doc_id, fix_dt, inserted_ts, user_id, account_id, training_type_id, tm_id, unnest(contact_ids) contact_id, doc_note from (
	select doc_id, fix_dt, inserted_ts, user_id, account_id, training_type_id, unnest(tm_ids) tm_id, contact_ids, doc_note from h_training
	    where user_id='%user_id%' and left(fix_dt, 10)='%b_date%' /*'%e_date%'*/
    ) z
) h
    left join training_types t on t.training_type_id = h.training_type_id
    left join training_materials m on m.tm_id = h.tm_id
    left join brands b on cardinality(m.brand_ids) = 1 and b.brand_id = m.brand_ids[1]
    left join accounts a on a.account_id = h.account_id
    left join contacts c on c.contact_id = h.contact_id
order by h.fix_dt, h.doc_id, c.surname, c.name, c.patronymic, b.row_no, b.descr, t.descr
  ]]>
	</L>
    </queries>
    <generator>
  <![CDATA[
require('rtlib').main("tech_trainings", true)
  ]]>
    </generator>
</tech_trainings>