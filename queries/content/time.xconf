<?xml version="1.0" encoding="utf-8" ?>
<time type="application/json" compress="gz" compress_level="9">
    <queries>
	<rules>
  <![CDATA[
select
    array_to_string("paramIntegerArray"('rules:wdays'),',') wdays, 
    "paramInteger"('rules:min_duration') min_duration,
    "paramInteger"('rules:max_duration') max_duration,
    "paramInteger"('rules:max_distance') max_distance,
    "paramUID"('rules:wd_begin')::time_t wd_begin,
    "paramUID"('rules:wd_end')::time_t wd_end,
    "paramUID"('rules:timing')::time_t timing
  ]]>
	</rules>
	<days>
  <![CDATA[
select 
    z.*,
    case when s.packets is not null and (s.packets).count > 0 then 1 else 0 end alive,
    s.gps_violations,
    s.tm_violations,
    case 
	when z.scheduled > 0 then 1
	when mvt.t_date is not null and (
		(coalesce(u."rules:wdays","paramIntegerArray"('rules:wdays')))[extract(dow from mvt.f_date::date)] = 1
		    or
		(coalesce(u."rules:wdays","paramIntegerArray"('rules:wdays')))[extract(dow from mvt.t_date::date)] = 1
	    ) then 1
	when mvf.f_date is not null then 0
	else (coalesce(u."rules:wdays","paramIntegerArray"('rules:wdays')))[extract(dow from z.route_date::date)]
    end wday,
    mvt.descr wdaymv
from (
    select 
	user_id,
	route_date, 
	min(b_dt) route_begin, 
	max(e_dt) route_end, 
	nullif(datediff(min(b_dt),max(e_dt)),0) route_duration,
	nullif(sum(instore_duration),0) instore_duration,
	nullif(count(route),0) scheduled, 
	nullif(count(route*closed),0) closed, 
	nullif(count(pending),0) pending, 
	nullif(count(discarded),0) discarded, 
	nullif(count(route*canceled),0) canceled, 
	nullif(count(closed)-count(route*closed),0) other,
	min(canceling_note) canceling_note,
	nullif(count(accepted),0) accepted,
	nullif(count(rejected),0) rejected,
	nullif(count(warn_min_duration),0) warn_min_duration,
	nullif(count(warn_max_duration),0) warn_max_duration,
	nullif(count(warn_max_distance),0) warn_max_distance,
	case
	    when min(b_dt) is not null and max(e_dt) is not null and count(closed) > 1 then
		nullif(mileage_get(user_id, route_date, substring(min(b_dt), 12, 5), substring(max(e_dt), 12, 5)),0)
	    else null
	end mileage
    from (
	select 
	    user_id,
	    case when ((route is null or route = 0) and closed = 1) or route_date is null
		then coalesce(left(b_dt,10),left(e_dt,10))
		else route_date 
	    end route_date, 
	    case when closed=1 and (route is null or route=0 or (route=1 and route_date=coalesce(left(b_dt,10),left(e_dt,10))))
		    and left(b_dt,10)=left(e_dt,10)
		then b_dt
		else null
	    end b_dt, 
	    case when closed=1 and (route is null or route=0 or (route=1 and route_date=coalesce(left(b_dt,10),left(e_dt,10))))
		    and left(b_dt,10)=left(e_dt,10)
		then e_dt
		else null
	    end e_dt, 
	    case when closed=1 and (route is null or route=0 or (route=1 and route_date=coalesce(left(b_dt,10),left(e_dt,10))))
		    and left(b_dt,10)=left(e_dt,10)
		then datediff(b_dt, e_dt)
		else null
	    end instore_duration,
	    route, 
	    closed, 
	    canceled, 
	    pending,
	    case when closed=1 then null else discarded end discarded,
	    case canceled when 1 then
		case 
		    when c.canceling_type_id is null then r.canceling_note
		    when NIL(r.canceling_note) is null then c.descr
		    else format('%s: %s', c.descr, r.canceling_note)
		end
	    else
		null
	    end canceling_note,
	    case when zstatus='accepted' then 1 else null end accepted,
	    case when zstatus='rejected' then 1 else null end rejected,
	    case when closed=1 and (route is null or route=0 or (route=1 and route_date=coalesce(left(b_dt,10),left(e_dt,10)))) 
		and datediff(r.b_dt, r.e_dt) < "paramInteger"('rules:min_duration') 
	    then 1 else null end warn_min_duration,
	    case when closed=1 and (route is null or route=0 or (route=1 and route_date=coalesce(left(b_dt,10),left(e_dt,10)))) 
		and datediff(r.b_dt, r.e_dt) > "paramInteger"('rules:max_duration') 
	    then 1 else null end warn_max_duration,
	    case when closed=1 and (route is null or route=0 or (route=1 and route_date=coalesce(left(b_dt,10),left(e_dt,10)))) 
		and (distance(a.latitude, a.longitude, r.latitude, r.longitude) > "paramInteger"('rules:max_distance') or
		    distance(a.latitude, a.longitude, r.latitude_e, r.longitude_e) > "paramInteger"('rules:max_distance'))
	    then 1 else null end warn_max_distance
	from user_routes(null, '%b_date%', '%e_date%', 1::bool_t) r
	    left join activity_types t on t.activity_type_id = r.activity_type_id
	    left join canceling_types c on c.canceling_type_id = r.canceling_type_id
	    left join accounts a on a.account_id = r.account_id
	where t.strict = 1
    ) r
    group by user_id, route_date
) z
    left join users u on u.user_id = z.user_id
    left join syswdmv mvf on mvf.country_id = u.country_id and mvf.f_date = z.route_date
    left join syswdmv mvt on mvt.country_id = u.country_id and mvt.t_date = z.route_date
    left join sysstats s on s.fix_date = z.route_date and s.user_id = z.user_id
order by z.user_id, z.route_date
  ]]>
	</days>
	<accounts>
  <![CDATA[
select 
    x.user_id,
    x.account_id, a.code a_code, a.descr, a.address,
    c.descr chan_name,
    p.descr poten_name,
    k1.rows v,
    k2.rows vwv /*visited-without-violations*/
from (
    select distinct user_id, account_id from my_routes where '%b_date%' <= p_date and p_date <= '%e_date%'
--	union
--    select user_id, account_id from my_accounts 
) x
    left join accounts a on a.account_id = x.account_id
    left join channels c on a.chan_id = c.chan_id
    left join potentials p on a.poten_id = p.poten_id
    left join (
	select j.user_id, j.account_id, count(j.account_id) "rows" from j_user_activities j, activity_types t
	    where coalesce(j.route_date,j.fix_date) is not null
		and coalesce(j.route_date,j.fix_date) >= '%b_date%'
		and coalesce(j.route_date,j.fix_date) <= '%e_date%'
		and j.activity_type_id = t.activity_type_id
		and j.b_dt is not null and j.e_dt is not null
		and t.strict = 1
	group by j.user_id, j.account_id
    ) k1 on a.account_id = k1.account_id and x.user_id = k1.user_id and k1.rows > 0
    left join (
	select j.user_id, j.account_id, count(j.account_id) "rows" from j_user_activities j, activity_types t, accounts a
	    where coalesce(j.route_date,j.fix_date) is not null
		and coalesce(j.route_date,j.fix_date) >= '%b_date%'
		and coalesce(j.route_date,j.fix_date) <= '%e_date%'
		and j.b_dt is not null and j.e_dt is not null
		and datediff(j.b_dt,j.e_dt) >= "paramInteger"('rules:min_duration')
		and (zstatus is null or zstatus = 'accepted')
		and j.activity_type_id = t.activity_type_id
		and t.strict = 1
		and j.account_id = a.account_id
		and coalesce(distance(a.latitude, a.longitude, j.b_la, j.b_lo),0) <= "paramInteger"('rules:max_distance')
		and coalesce(distance(a.latitude, a.longitude, j.e_la, j.e_lo),0) <= "paramInteger"('rules:max_distance')
	group by j.user_id, j.account_id
    ) k2 on a.account_id = k2.account_id and x.user_id = k2.user_id and k2.rows > 0
where a.account_id is not null
order by x.user_id, a.descr, a.address, a.account_id
  ]]>
	</accounts>
	<users>
  <![CDATA[
select 
    u.user_id, u.descr u_name, u.dev_login,
    u.area,
    (
	select array_to_string(array_agg(descr::text),'|') from distributors aa,
	    (select uu distr_id, row_number() over() rowno from unnest(u.distr_ids) uu) bb
	where aa.distr_id=bb.distr_id order by min(bb.rowno)
    ) distributors,
    (
	select array_to_string(array_agg(descr::text),'|') from departments aa,
	    (select uu dep_id, row_number() over() rowno from unnest(u.dep_ids) uu) bb
	where aa.dep_id=bb.dep_id order by min(bb.rowno)
    ) departments,
    u.email,
    u.mobile,
    e.user_id head_id, e.descr head_name,
/* personal rules: */
    array_to_string(u."rules:wdays",',') "rules:wdays",
    u."rules:wd_begin",
    u."rules:wd_end",
    u."rules:timing"
from users u
    left join users e on e.user_id = u.executivehead_id
where u.user_id in (
    select distinct user_id from my_routes where '%b_date%' <= p_date and p_date <= '%e_date%'
--	union
--    select user_id from my_accounts 
) and u.user_id in (
    select distinct user_id from sysstats where '%b_date%' <= fix_date and fix_date <= '%e_date%'
)
order by u.descr, u.user_id
  ]]>
	</users>
    </queries>
    <generator>
  <![CDATA[
local std = require('stdlib')
local rt = require('rtlib')
local tb = {}
local tonum = function(ar)
    local x = {}
    for i, v in ipairs(ar) do
	table.insert(x, tonumber(v))
    end
    return x
end
local days = rt.groups(_days, "user_id", function(r, n, a)
    if n == "gps_violations" then
	if r.violations == nil then
	    r.violations = {}
	end
	r.violations["gps"] = tonumber(a)
    elseif n == "tm_violations" then
	if r.violations == nil then
	    r.violations = {}
	end
	r.violations["tm"] = tonumber(a)
    elseif std.contains({'alive','route_duration','instore_duration','scheduled','closed','canceled','other','pending','discarded',
	    'accepted','rejected','warn_min_duration','warn_max_duration','warn_max_distance','mileage','wday'}, n) then
	r[n] = tonumber(a)
    else
	r[n] = a
    end
end)
local accounts = rt.groups(_accounts, "user_id", function(r, n, a)
    if std.contains({'v','vwv'}, n) then
	r[n] = tonumber(a)
    else
	r[n] = a
    end
end)

tb.code = "time"
tb.data_ts = _data_ts
tb.b_date = _b_date
tb.e_date = _e_date
tb.rules = { duration = {}, distance = {}, wd = {} }
tb.rows = rt.rows(_users, false, function(r, n, a)
    if std.contains({'distributors','departments'}, n) then
	r[n] = std.split(a, '|')
    elseif n == "user_id" then
	r[n] = a
	r.days = days[a]
	r.accounts = accounts[a]
    elseif n == "rules:wdays" then
	if r.rules == nil then
	    r.rules = {}
	end
	r.rules["wdays"] = tonum(std.split(a, ',', tonumber))
    elseif n == "rules:wd_begin" then
	if r.rules == nil then
	    r.rules = { wd = {} }
	elseif r.rules.wd == nil then
	    r.rules.wd = {}
	end
	r.rules.wd["begin"] = a
    elseif n == "rules:wd_end" then
	if r.rules == nil then
	    r.rules = { wd = {} }
	elseif r.rules.wd == nil then
	    r.rules.wd = {}
	end
	r.rules.wd["end"] = a
    elseif n == "rules:timing" then
	if r.rules == nil then
	    r.rules = { wd = {} }
	elseif r.rules.wd == nil then
	    r.rules.wd = {}
	end
	r.rules.wd["timing"] = a
    else
	r[n] = a
    end
end)

tb.rules.wdays = tonum(std.split(rowset_value(_rules, 0, rowset_colid(_rules, "wdays")), ',', tonumber))
tb.rules.duration["min"] = tonumber(rowset_value(_rules, 0, rowset_colid(_rules, "min_duration")))
tb.rules.duration["max"] = tonumber(rowset_value(_rules, 0, rowset_colid(_rules, "max_duration")))
tb.rules.distance["max"] = tonumber(rowset_value(_rules, 0, rowset_colid(_rules, "max_distance")))
tb.rules.wd["begin"] = rowset_value(_rules, 0, rowset_colid(_rules, "wd_begin"))
tb.rules.wd["end"] = rowset_value(_rules, 0, rowset_colid(_rules, "wd_end"))
tb.rules.wd["timing"] = rowset_value(_rules, 0, rowset_colid(_rules, "timing"))

set_param(_content, "rows", rowset_rows(_users))
write_stream(_content, json.encode(tb))
  ]]>
    </generator>
</time>