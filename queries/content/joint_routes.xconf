<?xml version="1.0" encoding="utf-8" ?>
<joint_routes type="application/json" compress="gz" compress_level="9">
    <queries>
	<L0>
  <![CDATA[
select
    format('%s:%s', left(h.fix_dt,10), h.employee_id) row_id,
    x.fix_date, 
    h.fix_dt, 
    h.employee_id, 
    e.descr employee,
    h.user_id author_id, 
    u.descr author, 
    round(100*h.sla,1) sla, 
    round(h.assessment,2) assessment, 
    h.note0, h.note1, h.note2, 
    x.jr_begin, 
    x.jr_end, 
    x.jr_duration, 
    x.duration, 
    x.closed, 
    case when x.jr_end <= h.fix_dt then 0 else 1 end rejected
from dyn_reviews h
    left join (
	select 
	    user_id, 
	    employee_id, 
	    fix_date, 
	    min(b_dt) jr_begin, 
	    max(e_dt) jr_end, 
	    to_char(max(e_dt)::timestamp - min(b_dt)::timestamp, 'HH24:MI') jr_duration,
	    to_char(sum(e_dt::timestamp - b_dt::timestamp), 'HH24:MI') duration, 
	    count(*) closed
	from j_user_activities j, activity_types t 
	where j.activity_type_id=t.activity_type_id and t.joint=1 and fix_date is not null and e_dt is not null and fix_date=left(e_dt,10)
	    and '%b_date%'<=fix_date and fix_date<='%e_date%'
	group by user_id, employee_id, fix_date
    ) x on x.user_id = h.user_id and x.employee_id = h.employee_id and x.fix_date = left(h.fix_dt, 10)
    left join users e on e.user_id = h.employee_id
    left join users u on u.user_id = h.user_id
where '%b_date%' <= left(h.fix_dt, 10) and left(h.fix_dt, 10) <= '%e_date%' and x.fix_date is not null
order by h.fix_dt desc, u.descr
  ]]>
	</L0>
	<L1>
  <![CDATA[
select
    format('%s:%s', j.fix_date, j.employee_id) row_id, 
    a.account_id, 
    a.code a_code, 
    a.descr a_name, 
    a.address, 
    reg.descr region,
    c.descr city,
    a.rc_id,
    r.descr rc,
    r.ka_type,
    p.descr poten,
    a.chan_id,
    ch.descr chan,
    j.b_dt, 
    j.e_dt, 
    datediff(j.b_dt, j.e_dt) duration,
    j.extra_info
from j_user_activities j
    left join activity_types t on j.activity_type_id = t.activity_type_id
    left join accounts a on j.account_id = a.account_id
    left join potentials p on a.poten_id = p.poten_id
    left join channels ch on a.chan_id = ch.chan_id
    left join retail_chains r on a.rc_id = r.rc_id
    left join regions reg on a.region_id = reg.region_id
    left join cities c on a.city_id = c.city_id
where 
    t.joint = 1 
    and j.fix_date is not null and j.e_dt is not null and j.fix_date = left(j.e_dt,10)
    and '%b_date%' <= fix_date and fix_date <= '%e_date%'
order by j.fix_date, j.employee_id, j.b_dt
  ]]>
	</L1>
	<L2>
  <![CDATA[
select
    format('%s:%s', d.fix_date, d.employee_id) row_id, 
    d.rating_criteria_id, 
    x.descr, 
    case 
	when d.score is null then null
	else d.wf
    end wf,
    d.score, 
    d.sla, 
    fix_dt
from (
    select
	fix_date, 
	employee_id,
	rating_criteria_id, 
	min(criteria_wf) wf,
	round(avg(score),1) score, 
	round(100*avg(score_wf),1) sla, 
	max(fix_dt) fix_dt
    from dyn_ratings
    where '%b_date%' <= fix_date and fix_date <= '%e_date%' and rating_score_id is not null
    group by fix_date, employee_id, rating_criteria_id
	union
    select
	r.fix_date,
	r.employee_id,
	t rating_criteria_id,
	null wf,
	null score,
	null sla,
	r.fix_dt
    from dyn_reviews r, unnest(unmarked) t
    where '%b_date%' <= r.fix_date and r.fix_date <= '%e_date%' and r.unmarked is not null and cardinality(r.unmarked) > 0
	and t not in (
	    select distinct rating_criteria_id from dyn_ratings k
		where k.fix_date = r.fix_date and k.employee_id = r.employee_id and k.rating_score_id is not null
	)
) d
    left join rating_criterias x on x.rating_criteria_id = d.rating_criteria_id
order by d.fix_date, d.employee_id, x.row_no, x.descr
  ]]>
	</L2>
	<L3>
  <![CDATA[
select
    format('%s:%s', d.fix_date, d.employee_id) row_id, 
    d.rating_criteria_id, 
    d.account_id, 
    d.score, 
    format_t(array[s.descr, d.note]) note
from dyn_ratings d
    left join rating_scores s on s.rating_score_id = d.rating_score_id and d.score is null
where '%b_date%' <= d.fix_date and d.fix_date <= '%e_date%' and d.rating_score_id is not null
order by d.fix_date, d.employee_id, d.rating_criteria_id, d.account_id
  ]]>
	</L3>
    </queries>
    <generator>
  <![CDATA[
local std = require('stdlib')
local rt = require('rtlib')

local tb, idx = {}, {}

tb.code = "joint_route"
tb.data_ts = _data_ts
tb.b_date = _b_date
tb.e_date = _e_date
tb.rows = rt.rows(_L0, true, function(r, n, a)
    if n == "row_id" then
	r.accounts = {}
	r.criterias = {}
	r.scores = {}
	idx[a] = r
    elseif std.contains({'sla','assessment','rejected','closed'}, n) then
	r[n] = tonumber(a)
    else
	r[n] = a
    end
end)

local function get(q, i, name)
    local r = idx[rowset_value(q, i, rowset_colid(q, "row_id"))]
    return r ~= nil and r[name] or nil
end

rt.foreach(_L1, function(q, i, cols)
    local r = get(q, i, "accounts")
    if r ~= nil then
	local x = {}
	for j = 0, cols-1 do
	    local n = rowset_colname(q, j)
	    local a = rowset_value(q, i, j)
	    if a ~= nil and n ~= "row_id" then
		if std.contains({'duration'}, n) then
		    x[n] = tonumber(a)
		else
		    x[n] = a
		end
	    end
	end
	table.insert(r, x)
    end
end)

rt.foreach(_L2, function(q, i, cols)
    local r = get(q, i, "criterias")
    if r ~= nil then
	local x = {}
	for j = 0, cols-1 do
	    local n = rowset_colname(q, j)
	    local a = rowset_value(q, i, j)
	    if a ~= nil and n ~= "row_id" then
		if std.contains({'wf','score','sla'}, n) then
		    x[n] = tonumber(a)
		else
		    x[n] = a
		end
	    end
	end
	table.insert(r, x)
    end
end)

rt.foreach(_L3, function(q, i, cols)
    local r = get(q, i, "scores")
    local a = rowset_value(q, i, rowset_colid(q, "account_id"))
    local c = rowset_value(q, i, rowset_colid(q, "rating_criteria_id"))
    local s = rowset_value(q, i, rowset_colid(q, "score"))
    local n = rowset_value(q, i, rowset_colid(q, "note"))
    if r ~= nil and a ~= nil and c ~= nil then
	local x = {}
	if s ~= nil then
	    x.score = tonumber(s)
	end
	if n ~= nil then
	    x.note = n
	end
	if r[a] == nil then
	    r[a] = {}
	end
	r[a][c] = x
    end
end)

set_param(_content, "rows", rowset_rows(_L0))
write_stream(_content, json.encode(tb))
  ]]>
    </generator>
</joint_routes>