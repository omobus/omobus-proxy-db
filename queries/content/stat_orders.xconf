<?xml version="1.0" encoding="utf-8" ?>
<stat_orders type="application/json" compress="gz" compress_level="9">
    <queries>
	<L0>
  <![CDATA[
select
    h.doc_id,
    left(h.fix_dt,10) fix_date, 
    h.fix_dt,
    h.user_id, u.descr u_name, u.dev_login, 
    h.account_id, a.code a_code, a.descr a_name, a.address, 
    reg.descr region, 
    c.descr city, 
    a.rc_id, r.descr rc, r.ka_type,
    p.descr poten,
    a.chan_id, ch.descr chan,
    h.doc_note, h.doc_no, h.amount, h.weight, h.volume, h.delivery_date, h.delivery_note, h.bonus, h.payment_delay, h.encashment,
    h.order_type_id, t.descr order_type,
    h.payment_method_id, m.descr payment_method,
    h.delivery_type_id, z.descr delivery_type,
    h.wareh_id, w.descr warehouse,
    h.distr_id, d.descr distributor,
    array_to_string((select array_agg(replace(descr,'|',' ')) from order_params where distr_id=h.distr_id and order_param_id=any(h.order_param_ids)),'|') order_params,
    u.executivehead_id head_id, ex.descr head_name,
    j.status ttd,
    h.inserted_ts
from h_order h
    left join order_types t on t.order_type_id = h.order_type_id
    left join payment_methods m on m.payment_method_id = h.payment_method_id
    left join delivery_types z on z.delivery_type_id = h.delivery_type_id
    left join distributors d on d.distr_id = h.distr_id
    left join warehouses w on w.wareh_id = h.wareh_id and w.distr_id = h.distr_id
    left join accounts a on a.account_id = h.account_id
    left join potentials p on a.poten_id = p.poten_id
    left join channels ch on a.chan_id = ch.chan_id
    left join retail_chains r on a.rc_id = r.rc_id
    left join regions reg on a.region_id = reg.region_id
    left join cities c on a.city_id = c.city_id
    left join users u on u.user_id = h.user_id
    left join users ex on ex.user_id = u.executivehead_id
    left join j_ttd j on j.doc_id = h.doc_id
where '%b_date%'<=left(h.fix_dt, 10) and left(h.fix_dt, 10)<='%e_date%'
order by h.inserted_ts desc, u.descr
  ]]>
	</L0>
	<L1>
  <![CDATA[
select
    t.doc_id, t.row_no, t.prod_id, p.descr prod, t.pack_id, x.descr pack_name, t.pack, t.qty, t.unit_price, t.discount, t.amount, t.weight, t.volume
from t_order t
    left join products p on p.prod_id = t.prod_id
    left join packs x on x.prod_id = t.prod_id and x.pack_id = t.pack_id
where t.doc_id in (select doc_id from h_order where '%b_date%'<=left(fix_dt, 10) and left(fix_dt, 10)<='%e_date%')
order by t.doc_id, t.row_no
  ]]>
	</L1>
	<E>
  <![CDATA[
select doc_id, pid, erp_id, erp_no, erp_dt, amount, status, doc_type from erp_docs e
    where doc_type in ('order','contract') and (select count(*) from h_order h where e.doc_id=h.doc_id and '%b_date%'<=left(h.fix_dt, 10) and left(h.fix_dt, 10)<='%e_date%') > 0
order by doc_id, erp_dt
  ]]>
	</E>
    </queries>
    <generator>
  <![CDATA[
local std = require('stdlib')
local rt = require('rtlib')

local tb, idx0, idx1 = {}, {}, {}

tb.code = "orders"
tb.data_ts = _data_ts
tb.b_date = _b_date
tb.e_date = _e_date
tb.rows = rt.rows(_L0, false, function(r, n, a)
    if n == "doc_id" then
	r.rows = {}
	r.erp = {}
	r[n] = a
	idx0[a] = r.rows
	idx1[a] = r.erp
    elseif std.contains({'amount','weight','volume','payment_delay','bonus','encashment','dist'}, n) then
	r[n] = tonumber(a)
    elseif n == 'order_params' then
	r[n] = std.split(a, '|')
    else
	r[n] = a
    end
end)

rt.foreach(_L1, function(q, i, cols)
    local r = idx0[rowset_value(q, i, rowset_colid(q, "doc_id"))]
    if r ~= nil then
	local x = {}
	for j = 0, cols-1 do
	    local n = rowset_colname(q, j)
	    local a = rowset_value(q, i, j)
	    if a ~= nil and n ~= "doc_id" then
		if std.contains({'row_no','amount','weight','volume','pack','qty','unit_price','discount'}, n) then
		    x[n] = tonumber(a)
		else
		    x[n] = a
		end
	    end
	end
	table.insert(r, x)
    end
end)

rt.foreach(_E, function(q, i, cols)
    local r = idx1[rowset_value(q, i, rowset_colid(q, "doc_id"))]
    if r ~= nil then
	local x = {}
	for j = 0, cols-1 do
	    local n = rowset_colname(q, j)
	    local a = rowset_value(q, i, j)
	    if a ~= nil and n ~= "doc_id" then
		if std.contains({'amount','status'}, n) then
		    x[n] = tonumber(a)
		else
		    x[n] = a
		end
	    end
	end
	table.insert(r, x)
    end
end)

set_param(_content, "rows", rowset_rows(_L0))
write_stream(_content, json.encode(tb))
  ]]>
    </generator>
</stat_orders>