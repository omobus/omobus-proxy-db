<?xml version="1.0" encoding="utf-8" ?>
<stat_shelfs type="application/json" compress="gz" compress_level="9">
    <queries>
	<L0>
  <![CDATA[
select
    format('%s:%s:%s', left(h.fix_dt,10), h.account_id, h.categ_id) row_id,
    h.user_id, u.descr u_name, u.dev_login,
    h.fix_dt,
    h.inserted_ts,
    h.account_id, a.code a_code, a.descr a_name, a.address,
    reg.descr region,
    c.descr city,
    a.rc_id, r.descr rc, r.ka_type,
    p.descr poten,
    a.chan_id, ch.descr chan,
    h.categ_id, x.descr categ,
    round(100*h.sos_target,0) sos_target,
    round(100*h.soa_target,0) soa_target,
    round(100*h.sos,1) sos,
    round(100*h.soa,1) soa,
    array_to_string(h.photos,',') photos,
    (select array_to_string(array_agg(guid::varchar),',') from thumbnail_stream ts where ts.photo = any(h.photos)) refs,
    u.executivehead_id head_id, ex.descr head_name
from (
    select distinct on (categ_id, account_id, left(fix_dt,10))
	doc_id, user_id, account_id, categ_id, fix_dt, sos_target, soa_target, sos, soa, photos, inserted_ts
    from h_shelf
	where '%b_date%'<=left(fix_dt, 10) and left(fix_dt, 10)<='%e_date%'
    order by categ_id, account_id, left(fix_dt,10), fix_dt desc
) h
    left join categories x on x.categ_id = h.categ_id
    left join accounts a on a.account_id = h.account_id
    left join potentials p on a.poten_id = p.poten_id
    left join channels ch on a.chan_id = ch.chan_id
    left join retail_chains r on a.rc_id = r.rc_id
    left join regions reg on a.region_id = reg.region_id
    left join cities c on a.city_id = c.city_id
    left join users u on u.user_id = h.user_id
    left join users ex on ex.user_id = u.executivehead_id
where '%b_date%'<=left(h.fix_dt, 10) and left(h.fix_dt, 10)<='%e_date%'
order by h.inserted_ts desc, u.descr
  ]]>
	</L0>
	<L1>
  <![CDATA[
select
    format('%s:%s:%s', d.fix_date, d.account_id, d.categ_id) row_id, x.descr, d.facing, d.assortment
from dyn_shelfs d
    left join brands x on x.brand_id = d.brand_id
where '%b_date%' <= d.fix_date and d.fix_date <= '%e_date%'
order by d.fix_date, d.categ_id, x.row_no, x.descr
  ]]>
	</L1>
    </queries>
    <generator>
  <![CDATA[
local std = require('stdlib')
local rt = require('rtlib')

local tb, idx = {}, {}

tb.code = "shelfs"
tb.data_ts = _data_ts
tb.b_date = _b_date
tb.e_date = _e_date
tb.rows = rt.rows(_L0, true, function(r, n, a)
    if n == "row_id" then
	r.brands = {}
	idx[a] = r.brands
    elseif std.contains({'photos','refs'}, n) then
	r[n] = std.split(a, ',')
    elseif std.contains({'sos_target','soa_target','sos','soa'}, n) then
	r[n] = tonumber(a)
    else
	r[n] = a
    end
end)

rt.foreach(_L1, function(q, i, cols)
    local r = idx[rowset_value(q, i, rowset_colid(q, "row_id"))]
    if r ~= nil then
	local x = {}
	for j = 0, cols-1 do
	    local n = rowset_colname(q, j)
	    local a = rowset_value(q, i, j)
	    if a ~= nil and n ~= "row_id" then
		if std.contains({'facing','assortment'}, n) then
		    x[n] = tonumber(a)
		else
		    x[n] = a
		end
	    end
	end
	table.insert(r, x)
    end
end)

set_param(_content, "rows", rowset_rows(_L0))
write_stream(_content, json.encode(tb))
  ]]>
    </generator>
</stat_shelfs>