<?xml version="1.0" encoding="utf-8"?>
<trainings templ="%user_id%,%u_name%,%department%,%year%,%month%,%fix_date%,%account_id%,%a_code%,%a_name%,%address%,%retail_chain%,%ka_type%,%a_category%,%channel%,%region%,%city%,%training_type%,%tm_id%,%tm_name%,%brand%,%contact_name%,%job_title%,%note%,%head_name%,%fix_dt%" empty="no">
  <![CDATA[
select
    d.user_id,
    quote_csv_string(u.descr) u_name,
    quote_csv_string(i.descr) department,
    left(d.fix_date, 4) "year",
    substring(d.fix_date, 6, 2) "month",
    d.fix_date,
    quote_csv_string(a.account_id) account_id,
    quote_csv_string(a.code) a_code,
    quote_csv_string(a.descr) a_name,
    quote_csv_string(a.address) address,
    quote_csv_string(rc.descr) retail_chain,
    quote_csv_string(rc.ka_type) ka_type,
    quote_csv_string(o.descr) a_category,
    quote_csv_string(n.descr) channel,
    quote_csv_string(r.descr) region,
    quote_csv_string(c.descr) city,
    quote_csv_string(t.descr) training_type,
    quote_csv_string(d.tm_id) tm_id,
    quote_csv_string(m.descr) tm_name,
    quote_csv_string(case when m.brand_ids is null or cardinality(m.brand_ids) = 1 then b.descr else
	(select array_to_string(array_agg(descr::text),', ') from brands where brand_id=any(m.brand_ids)) end) brand,
    quote_csv_string(trim(z.name || ' ' || coalesce(z.surname,''))) contact_name,
    quote_csv_string(j.descr) job_title,
    quote_csv_string(d.doc_note) note,
    quote_csv_string(e.descr) head_name,
    d.fix_dt
from (
    select fix_date, fix_dt, user_id, account_id, training_type_id, tm_id, unnest(contact_ids) contact_id, doc_note from (
	select left(fix_dt,10) fix_date, fix_dt, user_id, account_id, training_type_id, unnest(tm_ids) tm_id, contact_ids, doc_note from h_training
	    where left(fix_dt,10) >= ("monthDate_First"(current_date - "paramInteger"(case when "paramUID"('dumps:depth') is null then 'gc:keep_alive' else 'dumps:depth' end)))::date_t
    ) xz
) d
    left join training_types t on t.training_type_id = d.training_type_id
    left join users u on u.user_id = d.user_id
    left join departments i on u.dep_ids is not null and cardinality(u.dep_ids) = 1 and i.dep_id = u.dep_ids[1]
    left join users e on e.user_id = u.executivehead_id
    left join training_materials m on m.tm_id = d.tm_id
    left join brands b on cardinality(m.brand_ids) = 1 and b.brand_id = m.brand_ids[1]
    left join accounts a on a.account_id = d.account_id
    left join channels n on n.chan_id = a.chan_id
    left join potentials o on o.poten_id = a.poten_id
    left join regions r on r.region_id = a.region_id
    left join cities c on c.city_id = a.city_id
    left join retail_chains rc on rc.rc_id = a.rc_id
    left join contacts z on z.contact_id = d.contact_id
    left join job_titles j on j.job_title_id = z.job_title_id
order by d.fix_date desc, a.descr, a.address, u.descr, d.fix_dt, b.row_no, b.descr, m.descr, t.descr
  ]]>
</trainings>