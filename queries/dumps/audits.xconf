<?xml version="1.0" encoding="utf-8"?>
<audits templ="%user_id%,%u_name%,%department%,%year%,%month%,%fix_date%,%account_id%,%a_name%,%address%,%retail_chain%,%ka_type%,%a_category%,%channel%,%region%,%city%,%category%,%criteria%,%score%,%note%,%wf%,%criteria_wf%,%score_wf%,%sla%,%head_name%,%kam%,%fix_dt%" empty="no">
  <![CDATA[
select
    d.user_id,
    quote_csv_string(u.descr) u_name,
    quote_csv_string(i.descr) department,
    left(d.fix_date, 4) "year",
    substring(d.fix_date, 6, 2) "month",
    d.fix_date,
    a.account_id,
    quote_csv_string(a.descr) a_name,
    quote_csv_string(a.address) address,
    quote_csv_string(rc.descr) retail_chain,
    quote_csv_string(rc.ka_type) ka_type,
    quote_csv_string(o.descr) a_category,
    quote_csv_string(n.descr) channel,
    quote_csv_string(r.descr) region,
    quote_csv_string(c.descr) city,
    quote_csv_string(t.descr) category,
    quote_csv_string(x.descr) criteria,
    d.score,
    quote_csv_string(d.note) note,
    d.wf,
    d.criteria_wf,
    d.score_wf,
    d.sla,
    quote_csv_string(e.descr) head_name,
    quote_csv_string((select array_to_string(array_agg(descr::varchar),', ') kam_name from users
	where user_id in (select user_id from my_retail_chains where rc_id=a.rc_id and (region_id='' or region_id=a.region_id)) and hidden=0 and role='kam')) "KAM",
    d.fix_dt
from dyn_audits d
    left join users u on u.user_id = d.user_id
    left join departments i on u.dep_ids is not null and cardinality(u.dep_ids) = 1 and i.dep_id = u.dep_ids[1]
    left join users e on e.user_id = u.executivehead_id
    left join audit_criterias x on x.audit_criteria_id = d.audit_criteria_id
    left join categories t on t.categ_id = d.categ_id
    left join accounts a on a.account_id = d.account_id
    left join channels n on n.chan_id = a.chan_id
    left join potentials o on o.poten_id = a.poten_id
    left join regions r on r.region_id = a.region_id
    left join cities c on c.city_id = a.city_id
    left join retail_chains rc on rc.rc_id = a.rc_id
where d.fix_date >= ("monthDate_First"(current_date - "paramInteger"(case when "paramUID"('dumps:depth') is null then 'gc:keep_alive' else 'dumps:depth' end)))::date_t
order by d.fix_date desc, a.descr, a.address, t.row_no, t.descr, x.row_no, x.descr, d.fix_dt
  ]]>
</audits>