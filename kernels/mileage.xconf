<?xml version="1.0" encoding="utf-8" ?>
<kernel module="kern_tasks">
<!-- rebuilds mileage warm cached data. -->
<mileage ontimeout="yes" onsemaphore="yes">
  <![CDATA[
do $$
declare
    u uid_t;
    d date_t;
    c int32_t default 0;
    hs hstore;
    x0 time_t;
    x1 time_t;
    z0 time_t;
    z1 time_t;
    t int;
    r int32_t;
begin
    for u, d in 
	select m.user_id, m.fix_date from mileage_stream m, "mileage_stream.ghost" g
	    where m.user_id = g.user_id and m.fix_date = g.fix_date and (m.content_ts is null or g.data_ts >= m.content_ts)
	order by fix_date desc, data_ts
    loop
	z0 := NIL();
	z1 := NIL();
	t := 0;

	/*total mileage: */
	hs := hstore(array['', (mileage_calc(u, d))::text]);

	/* indoor mileages: */
	for x0, x1 in 
	    select substring(j.b_dt, 12, 5), substring(j.e_dt, 12, 5) from j_user_activities j, activity_types t
		where j.user_id = u and j.fix_date is not null and j.fix_date = d and j.activity_type_id = t.activity_type_id and t.strict = 1
		    and j.b_dt is not null and j.e_dt is not null and left(j.b_dt,10) = d and left(j.e_dt,10) = d
	    order by j.b_dt, j.e_dt
	loop
	    z0 := coalesce(z0, x0);
	    z1 := x1;
	    hs := hs || hstore(array[format('%s %s', x0, x1), (mileage_calc(u, d, x0, x1))::text]);
	    t := t + 1;
	end loop;

	/* route mileage */
	if z0 is not null and z1 is not null and t > 1 then
	    r := mileage_calc(u, d, z0, z1);
	    /* as first and last times: */
	    hs := hs || hstore(array[format('%s %s', z0, z1), (r)::text]);
	    /* as route value: */
	    hs := hs || hstore(array['route', (r)::text]);
	end if;

	update mileage_stream set data = hs, content_ts = current_timestamp
	    where user_id = u and fix_date = d;

	c := c + 1;
    end loop;

    if c > 0 then
	raise notice '[mileage_stream] % mileage row(s) updated.', c;
    end if;
end;
$$
  ]]>
</mileage>
</kernel>