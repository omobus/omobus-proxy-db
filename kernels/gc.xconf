<?xml version="1.0" encoding="utf-8" ?>
<kernel module="kern_tasks">
<gc ontimeout="no" onsemaphore="yes">
  <![CDATA[
do $$
declare
    alive int = "paramInteger"('gc:keep_alive'::uid_t);
    gc_date date_t = ("monthDate_First"(current_date - greatest(alive,60)))::date_t;
    i uid_t;
    f int;
    c int;
begin
    delete from console.sessions where inserted_ts::date_t < gc_date;
    delete from console.requests where inserted_ts::date_t < gc_date;

    delete from slices.accounts where slice_date < gc_date;
    delete from slices.agreements1 where slice_date < gc_date;
    delete from slices.agreements2 where slice_date < gc_date;
    delete from slices.agreements3 where slice_date < gc_date;
    delete from slices.matrices where slice_date < gc_date;
    delete from slices.my_accounts where slice_date < gc_date;

    delete from account_hints where updated_ts::date_t < gc_date;
    for i in select cycle_id from route_cycles where e_date < gc_date loop
	delete from routes where cycle_id = i;
	delete from route_cycles where cycle_id = i;
    end loop;

    delete from floating_prices where e_date < gc_date;
    delete from my_routes where p_date < gc_date;
    delete from priorities where NIL(e_date) is not null and e_date < gc_date;
    delete from reminders where e_date < gc_date;
    delete from routemv where greatest(f_date, t_date) < gc_date;
    delete from schedules where p_date < gc_date;
    delete from sysstats where fix_date < gc_date;
    delete from targets where e_date < gc_date;
    GET DIAGNOSTICS f = ROW_COUNT;
    delete from tickets where inserted_ts::date_t < gc_date;
    delete from urgent_activities where p_date < gc_date;

    delete from j_acts where left(fix_dt,10) < gc_date;
    delete from j_additions where left(fix_dt,10) < gc_date;
    delete from j_cancellations where route_date < gc_date;
    delete from j_deletions where left(fix_dt,10) < gc_date;
    delete from j_discards where left(fix_dt,10) < gc_date;
    delete from j_docs where left(fix_dt,10) < gc_date;
    delete from j_remarks where doc_id not in (select doc_id from h_confirmation);
    delete from j_revocations where updated_ts::date_t < gc_date;
    delete from j_ttd where updated_ts::date_t < gc_date;
    delete from j_user_activities where coalesce(b_dt,e_dt) < gc_date;
    delete from j_user_joints where b_dt < gc_date;
    delete from j_user_works where b_dt < gc_date;
    delete from j_wishes where left(fix_dt,10) < gc_date;

    delete from dyn_audits where fix_date < gc_date;
    delete from dyn_checkups where fix_date < gc_date;
    delete from dyn_oos where fix_date < gc_date;
    delete from dyn_presences where fix_date < gc_date;
    delete from dyn_prices where fix_date < gc_date;
    delete from dyn_quests where fix_date < gc_date;
    delete from dyn_ratings where fix_date < gc_date;
    delete from dyn_reviews where fix_date < gc_date;
    delete from dyn_shelfs where fix_date < gc_date;
    delete from dyn_stocks where fix_date < gc_date;

    delete from a_airplane where left(fix_dt,10) < gc_date;
    delete from a_applog where left(fix_dt,10) < gc_date;
    delete from a_bluetooth where left(fix_dt,10) < gc_date;
    delete from a_device where left(fix_dt,10) < gc_date;
    delete from a_exchange where left(fix_dt,10) < gc_date;
    delete from a_gps_pos where left(fix_dt,10) < gc_date;
    delete from a_gps_trace where left(fix_dt,10) < gc_date;
    delete from a_gps_pos where left(fix_dt,10) < gc_date;
    delete from a_gsm_state where left(fix_dt,10) < gc_date;
    delete from a_heap where left(fix_dt,10) < gc_date;
    delete from a_heap_trace where left(fix_dt,10) < gc_date;
    delete from a_lifecycle where left(fix_dt,10) < gc_date;
    delete from a_network where left(fix_dt,10) < gc_date;
    delete from a_package where left(fix_dt,10) < gc_date;
    delete from a_power where left(fix_dt,10) < gc_date;
    delete from a_sms where left(fix_dt,10) < gc_date;
    delete from a_statfs where left(fix_dt,10) < gc_date;
    delete from a_time where left(fix_dt,10) < gc_date;
    delete from a_traffic where left(fix_dt,10) < gc_date;
    delete from a_user_activity where left(fix_dt,10) < gc_date;
    delete from a_user_document where left(fix_dt,10) < gc_date;
    delete from a_user_joint where left(fix_dt,10) < gc_date;
    delete from a_user_report where left(fix_dt,10) < gc_date;
    delete from a_user_work where left(fix_dt,10) < gc_date;
    delete from a_wifi where left(fix_dt,10) < gc_date;

    delete from h_addition where left(fix_dt,10) < gc_date;
    for i in select doc_id from h_audit where left(fix_dt,10) < gc_date loop
	delete from t_audit where doc_id = i;
	delete from h_audit where doc_id = i;
    end loop;
    delete from h_canceling where left(fix_dt,10) < gc_date;
    for i in select doc_id from h_checkup where left(fix_dt,10) < gc_date loop
	delete from t_checkup where doc_id = i;
	delete from h_checkup where doc_id = i;
    end loop;
    delete from h_comment where left(fix_dt,10) < gc_date;
    delete from h_confirmation where left(fix_dt,10) < gc_date and target_id not in (select target_id from targets);
    delete from h_contact where left(fix_dt,10) < gc_date;
    delete from h_deletion where left(fix_dt,10) < gc_date;
    delete from h_discard where left(fix_dt,10) < gc_date;
    delete from h_dismiss where left(fix_dt,10) < gc_date;
    delete from h_equipment where left(fix_dt,10) < gc_date;
    delete from h_location where left(fix_dt,10) < gc_date;
    for i in select doc_id from h_oos where left(fix_dt,10) < gc_date loop
	delete from t_oos where doc_id = i;
	delete from h_oos where doc_id = i;
    end loop;
    for i in select doc_id from h_order where left(fix_dt,10) < gc_date loop
	delete from t_order where doc_id = i;
	delete from h_order where doc_id = i;
	delete from erp_docs where doc_id = i;
	delete from erp_products where doc_id = i;
    end loop;
    delete from h_pending where left(fix_dt,10) < gc_date;
    delete from h_photo where left(fix_dt,10) < gc_date;
    delete from h_posm where left(fix_dt,10) < gc_date;
    for i in select doc_id from h_presence where left(fix_dt,10) < gc_date loop
	delete from t_presence where doc_id = i;
	delete from h_presence where doc_id = i;
    end loop;
    delete from h_presentation where left(fix_dt,10) < gc_date;
    for i in select doc_id from h_price where left(fix_dt,10) < gc_date loop
	delete from t_price where doc_id = i;
	delete from h_price where doc_id = i;
    end loop;
    delete from h_profile where left(fix_dt,10) < gc_date;
    for i in select doc_id from h_quest where left(fix_dt,10) < gc_date loop
	delete from t_quest where doc_id = i;
	delete from h_quest where doc_id = i;
    end loop;
    for i in select doc_id from h_rating where left(fix_dt,10) < gc_date loop
	delete from t_rating where doc_id = i;
	delete from h_rating where doc_id = i;
    end loop;
    for i in select doc_id from h_reclamation where left(fix_dt,10) < gc_date loop
	delete from t_reclamation where doc_id = i;
	delete from h_reclamation where doc_id = i;
	delete from erp_docs where doc_id = i;
	delete from erp_products where doc_id = i;
    end loop;
    delete from h_review where left(fix_dt,10) < gc_date;
    for i in select doc_id from h_shelf where left(fix_dt,10) < gc_date loop
	delete from t_shelf where doc_id = i;
	delete from h_shelf where doc_id = i;
    end loop;
    for i in select doc_id from h_stock where left(fix_dt,10) < gc_date loop
	delete from t_stock where doc_id = i;
	delete from h_stock where doc_id = i;
    end loop;
    delete from h_target where left(fix_dt,10) < gc_date;
    delete from h_training where left(fix_dt,10) < gc_date;
    delete from h_unsched where left(fix_dt,10) < gc_date;
    delete from h_wish where left(fix_dt,10) < gc_date;

    /* temporarily locked: delete from blob_stream where inserted_ts::date_t < gc_date; */
    delete from content_stream where e_date < gc_date and e_date != '';
    delete from "content_stream.ghost" where e_date < gc_date and e_date != '';
    delete from mail_stream where inserted_ts::date_t < gc_date;
    delete from mileage_stream where fix_date < gc_date;
    delete from "mileage_stream.ghost" where fix_date < gc_date;
    delete from pack_stream where inserted_ts::date_t < gc_date;
    delete from streams.sms_stream where inserted_ts::date_t < gc_date;
    delete from streams.spam_stream where inserted_ts::date_t < gc_date;
    delete from thumbnail_stream where inserted_ts::date_t < gc_date and photo in (select orphanTHUMB());

    if( f > 0 ) then
	perform content_add('targets_compliance', '', '', '');
    end if;

    raise notice 'deleted rows before %.', gc_date;
end;
$$;
  ]]>
</gc>
<locations ontimeout="yes" onsemaphore="yes">
  <![CDATA[
do $$
declare
    a_id uid_t;
    a_address address_t;
    c int32_t default 0;
    radius int32_t default "paramInteger"('rules:max_distance')*1.3 /* threshold value for triggering the coordinate reset procedure */;
    t int32_t;
begin
    for a_id in 
	select 
	    distinct j.account_id 
	from j_user_activities j
	    left join activity_types t on t.activity_type_id = j.activity_type_id
	    left join (select account_id, max(fix_dt) fix_dt from h_location group by account_id) z on z.account_id = j.account_id
	    left join accounts a on a.account_id = j.account_id
	where t.strict = 1 
	    and j.b_dt is not null 
	    and j.e_dt is not null 
	    and (z.fix_dt is null or j.b_dt > z.fix_dt)
	    and (current_timestamp - j.updated_ts) < '00:55:00'::interval
	    and j.b_la is not null and j.b_lo is not null and j.b_la*j.b_lo <> 0
	    and j.e_la is not null and j.e_lo is not null and j.e_la*j.e_lo <> 0
	    and a.latitude is not null and a.longitude is not null
	    and distance(j.b_la, j.b_lo, a.latitude, a.longitude) > radius
	    and distance(j.e_la, j.e_lo, a.latitude, a.longitude) > radius
    loop
	select count(*) from (
	    select 
		distance(j.b_la, j.b_lo, a.latitude, a.longitude) b_dist,
		distance(j.e_la, j.e_lo, a.latitude, a.longitude) e_dist
	    from j_user_activities j
		left join activity_types t on t.activity_type_id = j.activity_type_id
		left join accounts a on a.account_id = j.account_id
		left join (select account_id, max(fix_dt) fix_dt from h_location group by account_id) z on z.account_id = j.account_id
	    where j.account_id = a_id and t.strict = 1 
		and j.b_dt is not null 
		and j.e_dt is not null 
		and (z.fix_dt is null or j.b_dt > z.fix_dt)
		and j.b_la is not null and j.b_lo is not null and j.b_la*j.b_lo <> 0
		and j.e_la is not null and j.e_lo is not null and j.e_la*j.e_lo <> 0
	    order by j.b_dt desc
	    limit 3
	) x where x.b_dist > radius and x.e_dist > radius
	into t;

	if t = 3 then
	    update accounts set latitude=null, longitude=null where account_id=a_id;
	    delete from geocode_stream where account_id=a_id;
	    c = c + 1;
	    raise notice '[account_id=%] location has been reset.', a_id;
	end if;
    end loop;
    if c > 0 then
	raise notice 'cleared % invalid account locations.', c;
    end if;

    c := 0;
    for a_id, a_address in
	select account_id, address from accounts
	     where (latitude is not null or longitude is not null) and account_id not in (select account_id from geocode_stream) and hidden = 0
    loop
	update accounts set latitude=null, longitude=null where account_id=a_id;
	insert into geocode_stream (account_id, reverse, address) values (a_id, 0, ltrim(rtrim(a_address)));
	c = c + 1;
    end loop;
    if c > 0 then
	raise notice 'cleared % unknown account locations.', c;
    end if;
end;
$$;
  ]]>
</locations>
</kernel>