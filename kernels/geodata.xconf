<?xml version="1.0" encoding="utf-8" ?>
<kernel module="kern_tasks">
<locations ontimeout="yes" onsemaphore="yes">
  <![CDATA[
do $$
declare
    a_id uid_t;
    a_address address_t;
    u_id uid_t;
    r_date date_t;
    c int32_t default 0;
    radius int32_t default "paramInteger"('rules:max_distance');
    t int32_t;
begin
    for a_id in 
	select distinct j.account_id from j_user_activities j
	    left join activity_types t on t.activity_type_id = j.activity_type_id
	    left join (select account_id, max(fix_dt) fix_dt from h_location group by account_id) z on z.account_id = j.account_id
	    left join accounts a on a.account_id = j.account_id
	where t.strict = 1 and j.b_dt is not null and (z.fix_dt is null or j.b_dt > z.fix_dt)
	    and (current_timestamp - j.updated_ts) < '00:55:00'::interval
	    and j.b_la is not null and j.b_lo is not null and j.b_la*j.b_lo <> 0
	    and a.latitude is not null and a.longitude is not null
	    and distance(j.b_la, j.b_lo, a.latitude, a.longitude) > radius
    loop
	select count(*) from (
	    select distance(j.b_la, j.b_lo, a.latitude, a.longitude) dist from j_user_activities j
		left join activity_types t on t.activity_type_id = j.activity_type_id
		left join accounts a on a.account_id = j.account_id
		left join (select account_id, max(fix_dt) fix_dt from h_location group by account_id) z on z.account_id = j.account_id
	    where j.account_id = a_id and t.strict = 1 and j.b_dt is not null and (z.fix_dt is null or j.b_dt > z.fix_dt)
	    order by j.b_dt desc
	    limit 3
	) x where x.dist > radius
	into t;

	if t = 3 then
	    update accounts set latitude=null, longitude=null where account_id=a_id;
	    delete from geocode_stream where account_id=a_id;
	    for r_date, u_id in select distinct p_date, user_id from my_routes where account_id=a_id
	    loop
		update "content_stream.ghost" set data_ts=current_timestamp where user_id=u_id and content_code='tech_route' and b_date=r_date;
	    end loop;
	    c = c + 1;
	    raise notice '[account_id=%] location has been reset.', a_id;
	end if;
    end loop;
    if c > 0 then
	raise notice 'cleared % invalid account locations.', c;
    end if;

    c := 0;
    for a_id, a_address in
	select account_id, address from accounts
	     where (latitude is not null or longitude is not null) and account_id not in (select account_id from geocode_stream) and hidden = 0
    loop
	update accounts set latitude=null, longitude=null where account_id=a_id;
	insert into geocode_stream (account_id, reverse, address) values (a_id, 0, ltrim(rtrim(a_address)));
	c = c + 1;
    end loop;
    if c > 0 then
	raise notice 'cleared % unknown account locations.', c;
    end if;
end;
$$;
  ]]>
</locations>
</kernel>